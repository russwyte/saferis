package saferis

import zio.*

import java.sql.ResultSet
import scala.annotation.StaticAnnotation

/** Represents a label for a column in a result set. Fields in a case class can be annotated with this to specify the
  * column name/label Example:
  * {{{
  *   case class User(
  *     @label("user_id") id: Int,
  *     @label("user_name") name: String
  *   )
  * }}}
  *
  * @param name
  */
final case class label(name: String) extends StaticAnnotation

/** denotes fields of a case class that are generated by the database
  */
class generated extends key

/** denotes fields of a case class that make up a primary key
  */
class key extends StaticAnnotation

/** denotes fields of a case class that should be indexed
  */
class indexed extends StaticAnnotation

/** denotes fields of a case class that should have a unique index
  */
class uniqueIndex extends StaticAnnotation

/** denotes fields of a case class that should have a unique constraint at the column level
  */
class unique extends StaticAnnotation

/** Represents a column/field in result set
  *
  * @param name
  *   the scala field name in the case class
  * @param label
  *   the column name/label in the result set
  * @param reader
  */
final case class Column[R: Decoder as readable: Encoder as writable](
    name: String,
    label: String,
    isKey: Boolean,
    isGenerated: Boolean,
    isIndexed: Boolean,
    isUniqueIndex: Boolean,
    isUnique: Boolean,
    tableAlias: Option[String],
) extends Placeholder:
  type ColumnType = R
  val writes = Seq.empty
  val sql    = tableAlias.fold(label)(a => s"$a.$label")

  private[saferis] def read(rs: ResultSet)(using Trace): Task[(String, R)] =
    readable.decode(rs, label).map(v => name -> v)
  private[saferis] def withTableAlias(alias: Option[String]) = copy(tableAlias = alias)

  // Provide SQL type information based on the encoder
  private[saferis] def sqlType: Int = writable.jdbcType
  private[saferis] def columnType(using dialect: Dialect = postgres.PostgresDialect): String =
    dialect.columnType(writable)
end Column
